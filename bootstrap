#!/usr/bin/env python3
import argparse
import os
import platform
import subprocess
import sys
import time

DEVENV_VERSION = "1.8"

def test_is_nixos():
    try:
        with open("/etc/os-release", "r") as f:
            os_info = f.read()
        return "ID=nixos" in os_info or "NAME=NixOS" in os_info
    except FileNotFoundError:
        return False


is_nixos = test_is_nixos()

if is_nixos:
    pathadd = "true"
else:
    pathadd = ". /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"

if platform.system() == "Darwin":
    restart_cmd = (
        "sudo launchctl kickstart -k system/systems.determinate.nix-daemon"
    )
else:
    restart_cmd = "sudo systemctl restart nix-daemon"


def run(cmd, **kw):
    result = subprocess.run(
        cmd,
        shell=True,
        universal_newlines=True,  # "text" is not compat w/ py3.6 and before
        **kw,
    )
    return result


def run_or_exit(cmd, failmsg="dependencies not ready"):
    print(cmd)
    cmd_result = run(cmd)
    if not cmd_result.returncode == 0:
        print(f"Failed to successfully run {cmd}, {failmsg}")
        sys.exit(cmd_result)
    return cmd_result


def probe(cmd):
    print(f"Probing via '{cmd}'")
    result = run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    success = result.returncode == 0
    if success:
        print("Probe succeeded")
    else:
        print(f"Probe failed with '{result.stderr.strip()}'")
    return success


def has_nix():
    cmd = f"{pathadd} && nix --version || exit 1"
    return probe(cmd)


def has_devenv():
    cmd = f"{pathadd} && $HOME/.nix-profile/bin/devenv version || exit 1"
    return probe(cmd)


def has_correct_devenv_version():
    cmd = f"{pathadd} && $HOME/.nix-profile/bin/devenv version"
    version = run(
        cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE
    ).stdout.strip()
    result = True
    if not DEVENV_VERSION in version:
        print(
            f'Incorrect devenv version (got "{version}", need '
            f"{DEVENV_VERSION})"
        )
        result = False
    return result


def has_curl():
    cmd = "curl --version || exit 1"
    return probe(cmd)


def uninstall(unattended=False):
    q = (
        "Are you sure you want to uninstall devenv dependencies "
        "(Nix/devenv)? [y/n] "
    )
    yn = input(q)
    if not yn.startswith(("Y", "y")):
        sys.exit(2)
    if has_devenv():
        remove_devenv_cmd = f"{pathadd} && nix profile remove devenv"
        run_or_exit(remove_devenv_cmd, "dependencies not fully removed")
    else:
        print("devenv not installed, skipping uninstall")
    if has_nix():
        if os.path.exists("/nix/nix-installer"):
            if unattended:
                extra_args = "--no-confirm"
            else:
                extra_args = ""
            uninstall_nix_cmd = f"/nix/nix-installer uninstall {extra_args}"
            run_or_exit(uninstall_nix_cmd, "dependencies not fully removed")
        else:
            print("Nix not installed via installer, skipping uninstall")
    else:
        print("Nix not installed, skipping uninstall")


def install(unattended=False):
    if has_nix():
        print("Skipping installation of Nix, already installed")
    else:
        if not has_curl():
            print("No working curl command, exiting")
            sys.exit(2)
        if unattended:
            extra_args = "--no-confirm"
        else:
            extra_args = ""
        install_nix_cmd = (
            "curl --proto '=https' --tlsv1.2 -sSf "
            "-L https://install.determinate.systems/nix | sh -s -- install "
            f"{extra_args}"
        )
        run_or_exit(install_nix_cmd)
        trust_cmd = 'sudo echo "trusted-users = $USER"  | sudo tee -a /etc/nix/nix.custom.conf'
        run_or_exit(trust_cmd)
        run_or_exit(restart_cmd)
        time.sleep(2)

    had_devenv = False
    if has_devenv():
        if not has_correct_devenv_version():
            print("Removing old devenv")
            remove_devenv_cmd = f"{pathadd} && nix profile remove devenv"
            run(remove_devenv_cmd)
            had_devenv = False
        else:
            print("Skipping installation of devenv, already installed")
            had_devenv = True
    if not had_devenv:
        install_devenv_cmd = (
            f"{pathadd} && nix profile install "
            f"--accept-flake-config github:cachix/devenv/v{DEVENV_VERSION}"
        )
        run_or_exit(install_devenv_cmd)
    if is_nixos:
        print("Dependencies ready")
    else:
        print(
            "Dependencies ready, type:\n\n"
            f"{pathadd}\n\n"
            "Or open a new shell to put devenv and Nix on the PATH"
        )


if __name__ == "__main__":
    ap = argparse.ArgumentParser(
        description="Wih no arguments, install dependencies of devenv",
    )
    ap.add_argument(
        "--uninstall",
        action="store_true",
        help="Uninstall dependencies of devenv",
        default=False,
    )
    ap.add_argument(
        "--unattended",
        action="store_true",
        help="Don't ask questions",
        default=False,
    )
    args = ap.parse_args()
    if args.uninstall:
        uninstall(args.unattended)
    else:
        install(args.unattended)
